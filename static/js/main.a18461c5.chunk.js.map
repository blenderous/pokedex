{"version":3,"sources":["Pokemon.js","PokeList.js","serviceWorker.js","index.js"],"names":["React","Component","PokeList","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","loading","pokeDex","searchUpdated","bind","assertThisInitialized","inherits","createClass","key","value","_this2","fetch","then","response","ok","json","data","console","log","catch","error","finally","setState","isLoading","react_default","a","createElement","lib_default","className","onChange","term","Boolean","window","location","hostname","match","ReactDOM","render","PokeList_PokeList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAE6BA,IAAMC,0BCKtBC,EAAb,SAAAC,GAEI,SAAAD,EAAaE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAChBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,WAAY,GACZC,SAAS,EACTC,QAAS,MAEbV,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPLA,EAFxB,OAAAC,OAAAa,EAAA,EAAAb,CAAAJ,EAAAC,GAAAG,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,EAAAmB,IAAA,oBAAAC,MAAA,WAYwB,IAAAC,EAAAf,KAChBgB,MAAM,kBACLC,KAAM,SAAAC,GACH,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAMF,IACPD,KAAM,SAAAI,GACLC,QAAQC,IAAIF,KAEbG,MAAO,SAAAC,GACNH,QAAQG,MAAM,qBAAsBA,KACrCC,QAAQ,WACPX,EAAKY,SAAS,CAACrB,SAAS,QAzBpC,CAAAO,IAAA,SAAAC,MAAA,WAiCYd,KAAKI,MAAMG,SACXe,QAAQC,IAAIvB,KAAKI,OAIrB,IAAMwB,EAAY5B,KAAKI,MAAME,QAE7B,OAEIuB,EAAAC,EAAAC,cAAA,WACMH,EACIC,EAAAC,EAAAC,cAAA,wBAEJF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAaG,UAAU,eAAeC,SAAUlC,KAAKQ,gBACrDqB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,2BAhDlC,CAAApB,IAAA,gBAAAC,MAAA,SAqEmBqB,GACXnC,KAAK2B,SAAS,CAACtB,WAAY8B,QAtEnCzC,EAAA,CAA8BF,IAAMC,WCKhB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAAcC,SAASC,eAAe,SDwHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.a18461c5.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Pokemon extends React.Component {\n    render() {\n        return (\n            <div>\n                {/* display modal */}\n                <div className={\"modal fade bs-example-modal-sm\" + this.props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\n                    <div className=\"modal-dialog modal-sm\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <h4>{this.props.name}</h4>\n                            <p>Type: {this.props.type.toString()}</p>\n                            <p>Attack: {this.props.attack}</p>\n                            <p>Defense: {this.props.defense}</p>\n                        </div>\n                    </div>\n                </div>\n                {/* edit modal */}\n                {/* <div className={\"modal fade bs-example-modal-sm-edit\" + this.props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\n                    <div className=\"modal-dialog modal-sm\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <h4>Edit {this.props.name}</h4>\n                            <form action=\"#\">\n                                <div className=\"form-group\">\n                                    <label>Type&nbsp;\n                                        <input id=\"type\" type=\"text\" value={this.props.type.toString()}/>\n                                    </label>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Attack&nbsp;\n                                        <input type=\"text\" value={this.props.attack}/>\n                                    </label>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Defense&nbsp;\n                                        <input type=\"text\" value={this.props.defense}/>\n                                    </label>\n                                </div>\n                                <div>\n                                    <button className=\"btn btn-primary\" type=\"submit\">Save</button>\n                                </div>                                \n                            </form>\n                        </div>\n                    </div>\n                </div> */}\n                <div className=\"pokemon-container\">\n                    <p className=\"pokemon-name\">\n                        {this.props.name}\n                    </p>\n                    {/* know more button */}\n                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target={\".bs-example-modal-sm\" + this.props.id}>Know more</button>\n                    {/* edit button */}\n                    {/* <button type=\"button\" className=\"btn\" data-toggle=\"modal\" data-target={\".bs-example-modal-sm-edit\" + this.props.id}>Edit</button> */}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Pokemon } from './Pokemon';\nimport SearchInput, {createFilter} from 'react-search-input';\n// import pokeDex from './pokedex.json';\n\nconst KEYS_TO_FILTERS = ['name.english', 'type']\n\nexport class PokeList extends React.Component {\n\n    constructor (props) {\n        super(props)\n        this.state = {\n            searchTerm: '',\n            loading: true,\n            pokeDex: null\n        }\n        this.searchUpdated = this.searchUpdated.bind(this)\n    }\n\n    componentDidMount() {\n        fetch('./pokedex.json')\n        .then( response => {\n            if (response.ok) {\n                return response.json()\n            }\n            throw response\n        }).then (data => {\n            console.log(data)\n            // this.setState({pokeDex: data})\n        }).catch (error => {\n            console.error(\"An error occured: \", error)\n        }).finally(() => {\n            this.setState({loading: false})\n        })\n    }\n\n    render() {\n\n        let filteredPokemons = null;\n        \n        if (this.state.pokeDex) {\n            console.log(this.state)\n            // filteredPokemons = this.state.pokeDex.filter(createFilter(this.state.searchTerm, KEYS_TO_FILTERS))\n        }\n\n        const isLoading = this.state.loading;\n        \n        return (\n\n            <div>\n                { isLoading \n                    ? <div>Loading..</div> \n                    \n                : <div>\n                    <SearchInput className=\"search-input\" onChange={this.searchUpdated} />\n                    <ul className=\"pokelist-container\">\n                    {/* {filteredPokemons.map(pokemon => {\n                        return (\n                            <li key={pokemon.id}>\n                                <Pokemon \n                                    id={pokemon.id}\n                                    name={pokemon.name.english}\n                                    type={pokemon.type}\n                                    attack={pokemon.base.Attack}\n                                    defense={pokemon.base.Defense}\n                                />\n                            </li>\n                            )\n                        }   \n                    )} */}\n                    </ul>\n                </div> }\n            </div>\n        )\n    }\n\n    searchUpdated (term) {\n        this.setState({searchTerm: term})\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { PokeList } from './PokeList';\nimport * as serviceWorker from './serviceWorker';\n// import popper from './popper.min.js';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<PokeList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}